# Additional make targets

.NOTPARALLEL:
DISTFILES.extra2 = Rules-others Makevars.in

#-- Compute the rsrc name of a source file, prefix with the act name
#   if the source is in a storyline subdir
# $(1) = source file

define rsrc_name =
	rsrc=`basename $(1) | sed -e 's/\..*$$//'`; \
	actname=`dirname $(1) | grep -o -E "storyline/.*" | sed -E "s,storyline/([^/]*).*,\1-,"`; \
	rsrc=$$actname$$rsrc
endef

#== Output statistics

l10n-stats:
	@catalogs='$(CATALOGS)'; \
	for cat in $$catalogs; do \
	  lang=`basename $$cat .gmo;`; \
	  stats=`msgfmt --statistics -o /dev/null $$lang.po 2>&1`; \
	  echo "    $$lang: $$stats"; \
	done

#== Clean obsolete strings

l10n-clean:
	@catalogs='$(CATALOGS)'; \
	for cat in $$catalogs; do \
	  lang=`basename $$cat .gmo;`; \
	  msgattrib $(MSGCAT_OPTIONS) --no-obsolete -o cleaned.po $$lang.po; \
	  if ! cmp -s cleaned.po $$lang.po ; then \
	    count=`grep -c "#~ msgid" $$lang.po`; \
	    echo "Cleaning $$lang.po: $$count obsolete entries"; \
	    rm $$lang.po && mv cleaned.po $$lang.po; \
	  else \
	    rm cleaned.po; \
	  fi; \
	done

#== Regenerate POTFILES.in if the list of source files changed
#== (executed before the main update-po rule)

POTSRCS = $(foreach act, $(POTINCLUDES), -i $(act) $(foreach excl, $(POTEXCLUDES), -x $(act)/$(excl)))

update-po: update-pot
update-pot:
	@if [ -x $(top_srcdir)/po/update-potfiles ] ; then \
	   $(top_srcdir)/po/update-potfiles $(POTSRCS) > POTFILES.inT ; \
	   if ! cmp -s POTFILES.inT POTFILES.in ; then \
	     rm POTFILES.in && mv POTFILES.inT POTFILES.in; \
	     echo "POTFILES.in updated"; \
	   else \
	     rm POTFILES.inT; \
	   fi; \
	 fi

#== Auto-install catalogs locally

update-gmo: stamp-li
all: stamp-li

stamp-li: $(GMOFILES)
	@$(MAKE) local-install ; \
	 echo "touch stamp-li" && \
	 echo timestamp > stamp-liT && \
	 mv stamp-liT stamp-li

local-install:
	@$(mkdir_p) $(top_srcdir)/locale &>/dev/null; \
	 if [ $$? -eq 0 ] ; then \
	   catalogs='$(CATALOGS)'; \
	   for cat in $$catalogs; do \
	     cat=`basename $$cat`; \
	     lang=`echo $$cat | sed -e 's/\.gmo$$//'`; \
	     dir=$(top_srcdir)/locale/$$lang/LC_MESSAGES; \
	     $(mkdir_p) $$dir; \
	     if test -r $$cat; then realcat=$$cat; else realcat=$(srcdir)/$$cat; fi; \
	     $(INSTALL_DATA) $$realcat $$dir/$(DOMAIN).mo; \
	     echo "installing $$realcat as $$dir/$(DOMAIN).mo"; \
	   done; \
	 fi

.PHONY: local-install update-pot

#== Transifex synchronization

TXPROJ   = freedroid-rpg
TXFILES  = $(shell grep -v -E "^\#" POTFILES.in)
TXPREFIX = data
TXPROPS  = '{"category":"data"}'
TXCRED   = $(shell $(top_srcdir)/po/tx-credentials)

# Update the transifex potfiles
#
# The single game's pot file is split into individual pot files (as defined by TXFILES),
# and for each individual file:
# - if the associated resource is not found in the tx config file:
#   - the resource is created,
#   - the pot file is pushed,
#   - and the category is changed.
# - else:
#   - the pot file is pushed.
#
# Note: It is not yet possible to define a resource's category using tx-set
# (transifex-client version 0.10). We thus directly use the transifex remote
# API to change it once the resource has been pushed.

tx-update: $(DOMAIN).pot
	@test " $(TXCRED)" = " " \
	 && { \
	      echo "You do not have a Transifex account"; \
	      exit 1; \
	    }; \
	$(mkdir_p) tx; \
	files='$(TXFILES)'; \
	for file in $$files; do \
	  $(call rsrc_name,$$file); \
	  msggrep $(MSGCAT_OPTIONS) --location=$$file -o tx/$$rsrc.pot $(DOMAIN).pot; \
	  if test -r tx/$$rsrc.pot; then \
	    if ! tx -q status -r $(TXPROJ).$(TXPREFIX)-$$rsrc >/dev/null 2>/dev/null; then \
	      echo "Creating $(TXPREFIX)-$$rsrc"; \
	      tx -q config mapping -r $(TXPROJ).$(TXPREFIX)-$$rsrc --source-lang en --type PO --source-file tx/$$rsrc.pot --expression "tx/$$rsrc-<lang>.po" --execute; \
	      if tx -q push -r $(TXPROJ).$(TXPREFIX)-$$rsrc -s >/dev/null 2>/dev/null; then \
	        curl_output=`curl -s -L $(TXCRED) -X PUT -d $(TXPROPS) -H "Content-Type: application/json" https://www.transifex.com/api/2/project/$(TXPROJ)/resource/$(TXPREFIX)-$$rsrc;` \
	        rtn=$$?; \
	        if test $$rtn -ne 0 -o " $$curl_output" != " OK"; then echo "Warning. Failed to set properties: $$curl_output (error code $$rtn)"; fi; \
	      fi; \
	    else \
	      echo "Updating $(TXPREFIX)-$$rsrc"; \
	      tx -q push -r $(TXPROJ).$(TXPREFIX)-$$rsrc -s; \
	    fi; \
	  fi; \
	done; \
	rm -rf tx

# Pull the translations from transifex.
#
# For each lang and each individual pot file (as defined by TXFILES):
# - the translation is fetched from transifex
# - merged into the game's po file of that lang
# - merged with the game's pot file (to synchronize comments and file positions)
#
# Note: the translated strings of a transifex file will override the
# translated strings of the game's file.

tx-pull:
	@test " $(TXCRED)" = " " \
	 && { \
	      echo "You do not have a Transifex account"; \
	      exit 1; \
	    }; \
	$(mkdir_p) tx; \
	catalogs='$(CATALOGS)'; \
	files='$(TXFILES)'; \
	for cat in $$catalogs; do \
	  cat=`basename $$cat`; \
	  lang=`echo $$cat | sed -e 's/\.gmo$$//'`; \
	  for file in $$files; do \
	    $(call rsrc_name,$$file); \
	    echo "Pulling $$rsrc-$$lang.po from transifex"; \
	    if tx -q pull -r $(TXPROJ).$(TXPREFIX)-$$rsrc -l $$lang; then \
	      if test -r tx/$$rsrc-$$lang.po; then \
	        echo "Merging with $$lang.po"; \
	        msgcat $(MSGCAT_OPTIONS) --use-first -o $$lang.po tx/$$rsrc-$$lang.po $$lang.po; \
	      else \
	        echo "Nothing to merge"; \
	      fi; \
	    fi; \
	  done; \
	  $(MSGMERGE_UPDATE) $(MSGMERGE_OPTIONS) $$lang.po $(DOMAIN).pot; \
	done; \
	rm -rf tx

# Push the translations to transifex.
#
# For each lang:
# - the game's po file is split into individual po files (as defined by TXFILES)
# - for each individual po file:
#   - the po file is pushed to transifex

tx-push:
	@test " $(TXCRED)" = " " \
	 && { \
	      echo "You do not have a Transifex account"; \
	      exit 1; \
	    }; \
	test -e tx-push-granted \
	|| { \
	     echo "tx-push is a risky command."; \
	     echo "Create a 'tx-push-granted' file if you really want to execute it."; \
	     exit 1; \
	   }; \
	rm -f tx-push-granted; \
	$(mkdir_p) tx; \
	catalogs='$(CATALOGS)'; \
	files='$(TXFILES)'; \
	for cat in $$catalogs; do \
	  cat=`basename $$cat`; \
	  lang=`echo $$cat | sed -e 's/\.gmo$$//'`; \
	  for file in $$files; do \
	    $(call rsrc_name,$$file); \
	    msggrep $(MSGCAT_OPTIONS) --location=$$file -o tx/$$rsrc-$$lang.po $$lang.po; \
	    echo "Pushing $$rsrc-$$lang.po to transifex"; \
	    tx -q push -r $(TXPROJ).$(TXPREFIX)-$$rsrc -l $$lang -t; \
	  done; \
	done; \
	rm -rf tx

.PHONY: tx-update tx-pull tx-push
